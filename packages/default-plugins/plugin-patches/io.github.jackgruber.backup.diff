diff --git a/src/Backup.ts b/src/Backup.ts
index 2c0c174..2bd03f3 100644
--- a/src/Backup.ts
+++ b/src/Backup.ts
@@ -4,6 +4,7 @@ import joplin from "api";
 import * as path from "path";
 import backupLogging from "electron-log";
 import * as fs from "fs-extra";
+import * as os from "os";
 import { sevenZip } from "./sevenZip";
 import * as moment from "moment";
 import { helper } from "./helper";
@@ -28,6 +29,7 @@ class Backup {
   private compressionLevel: number;
   private singleJex: boolean;
   private createSubfolder: boolean;
+  private createSubfolderPerProfile: boolean;
   private backupSetName: string;
   private exportFormat: string;
   private execFinishCmd: string;
@@ -272,12 +274,10 @@ class Backup {
       );
     }
 
-    if (this.createSubfolder) {
-      this.log.verbose("append subFolder");
-      const orgBackupBasePath = this.backupBasePath;
-      this.backupBasePath = path.join(this.backupBasePath, "JoplinBackup");
+    const origBackupBasePath = this.backupBasePath;
+    const handleSubfolderCreation = async () => {
       if (
-        fs.existsSync(orgBackupBasePath) &&
+        fs.existsSync(origBackupBasePath) &&
         !fs.existsSync(this.backupBasePath)
       ) {
         try {
@@ -286,19 +286,56 @@ class Backup {
           await this.showError(i18n.__("msg.error.folderCreation", e.message));
         }
       }
+    };
+
+    if (this.createSubfolder) {
+      this.log.verbose("append subFolder");
+      this.backupBasePath = path.join(this.backupBasePath, "JoplinBackup");
+      await handleSubfolderCreation();
     }
 
-    if (path.normalize(profileDir) === this.backupBasePath) {
-      this.backupBasePath = null;
-      await this.showError(
-        i18n.__("msg.error.backupPathJoplinDir", path.normalize(profileDir))
+    if (this.createSubfolderPerProfile) {
+      this.log.verbose("append profile subfolder");
+      // We assume that Joplin's profile structure is the following
+      //   rootProfileDir/
+      //   | profileDir/
+      //   | | [[profile content]]
+      // or, if using the default,
+      //   rootProfileDir/
+      //   | [[profile content]]
+      const profileRootDir = await joplin.settings.globalValue(
+        "rootProfileDir"
       );
+      const profileCurrentDir = await joplin.settings.globalValue("profileDir");
+
+      let profileName = path.basename(profileCurrentDir);
+      if (profileCurrentDir === profileRootDir) {
+        profileName = "default";
+      }
+
+      this.backupBasePath = path.join(this.backupBasePath, profileName);
+      await handleSubfolderCreation();
+    }
+
+    const handleInvalidPath = async (errorId: string) => {
+      const invalidBackupPath = this.backupBasePath;
+      this.backupBasePath = null;
+      await this.showError(i18n.__(errorId, invalidBackupPath));
+    };
+
+    if (helper.isSubdirectoryOrEqual(this.backupBasePath, os.homedir())) {
+      await handleInvalidPath("msg.error.backupPathContainsHomeDir");
+    } else if (helper.isSubdirectoryOrEqual(this.backupBasePath, profileDir)) {
+      await handleInvalidPath("msg.error.backupPathContainsJoplinDir");
     }
   }
 
   public async loadSettings() {
     this.log.verbose("loadSettings");
     this.createSubfolder = await joplin.settings.value("createSubfolder");
+    this.createSubfolderPerProfile = await joplin.settings.value(
+      "createSubfolderPerProfile"
+    );
     await this.loadBackupPath();
     this.backupRetention = await joplin.settings.value("backupRetention");
 
@@ -477,6 +514,7 @@ class Backup {
         await this.backupNotebooks();
 
         const backupDst = await this.makeBackupSet();
+        await this.writeReadme(backupDst);
 
         await joplin.settings.setValue(
           "lastBackup",
@@ -684,6 +722,16 @@ class Backup {
     }
   }
 
+  private async writeReadme(backupFolder: string) {
+    const readmePath = path.join(backupFolder, "README.md");
+    this.log.info("writeReadme to", readmePath);
+    const readmeText = i18n.__(
+      "backupReadme",
+      this.backupStartTime.toLocaleString()
+    );
+    await fs.writeFile(readmePath, readmeText, "utf8");
+  }
+
   private async backupNotebooks() {
     const notebooks = await this.selectNotebooks();
 
diff --git a/src/helper.ts b/src/helper.ts
index 3726fc2..45eba0c 100644
--- a/src/helper.ts
+++ b/src/helper.ts
@@ -1,4 +1,5 @@
 import joplin from "api";
+import * as path from "path";
 
 export namespace helper {
   export async function validFileName(fileName: string) {
@@ -65,4 +66,28 @@ export namespace helper {
 
     return result;
   }
+
+  // Doesn't resolve simlinks
+  // See https://stackoverflow.com/questions/44892672/how-to-check-if-two-paths-are-the-same-in-npm
+  // for possible alternative implementations.
+  export function isSubdirectoryOrEqual(
+    parent: string,
+    possibleChild: string,
+
+    // Testing only
+    pathModule: typeof path = path
+  ) {
+    // Appending path.sep to handle this case:
+    //   parent: /a/b/test
+    //   possibleChild: /a/b/test2
+    // "/a/b/test2".startsWith("/a/b/test") -> true, but
+    // "/a/b/test2/".startsWith("/a/b/test/") -> false
+    //
+    // Note that .resolve removes trailing slashes.
+    //
+    const normalizedParent = pathModule.resolve(parent) + pathModule.sep;
+    const normalizedChild = pathModule.resolve(possibleChild) + pathModule.sep;
+
+    return normalizedChild.startsWith(normalizedParent);
+  }
 }
diff --git a/src/locales/de_DE.json b/src/locales/de_DE.json
index 9749df5..1f6b902 100644
--- a/src/locales/de_DE.json
+++ b/src/locales/de_DE.json
@@ -13,7 +13,7 @@
       "Backup": "Backup Fehler für %s: %s",
       "fileCopy": "Fehler beim kopieren von Datei/Ordner in %s: %s",
       "deleteFile": "Fehler beim löschen von Datei/Ordner in %s: %s",
-      "backupPathJoplinDir": "Als Sicherungs Pfad wurde das Joplin profile Verzeichniss (%s) ohne Unterordner ausgewählt, dies ist nicht erlaubt!",
+      "backupPathContainsJoplinDir": "Als Sicherungs Pfad wurde das Joplin profile Verzeichniss (%s) ohne Unterordner ausgewählt, dies ist nicht erlaubt!",
       "BackupSetNotSupportedChars": "Der Name des Backup-Sets enthält nicht zulässige Zeichen ( %s )!",
       "passwordDoubleQuotes": "Das Passwort enthält \" (Doppelte Anführungszeichen), diese sind wegen eines Bugs nicht erlaubt. Der Passwortschutz für die Backups wurde deaktivert!"
     }
diff --git a/src/locales/en_US.json b/src/locales/en_US.json
index 79b6d55..f9d5325 100644
--- a/src/locales/en_US.json
+++ b/src/locales/en_US.json
@@ -13,7 +13,8 @@
       "Backup": "Backup error for %s: %s",
       "fileCopy": "Error on file/folder copy in %s: %s",
       "deleteFile": "Error on file/folder delete in %s: %s",
-      "backupPathJoplinDir": "The backup path is the Joplin profile directory (%s) without subfolders, this is not allowed!",
+      "backupPathContainsJoplinDir": "The backup path is or contains the Joplin profile directory (%s) without subfolders, this is not allowed!",
+      "backupPathContainsHomeDir": "The backup path is or contains the home directory (%s). Without enabling the subfolder setting, this is not allowed!",
       "BackupSetNotSupportedChars": "Backup set name does contain not allowed characters ( %s )!",
       "passwordDoubleQuotes": "Password contains \" (double quotes), these are not allowed because of a bug. Password protection for the backup is deactivated!"
     }
@@ -57,6 +58,10 @@
       "label": "Create Subfolder",
       "description": "Create a subfolder in the the configured `Backup path`. Deactivate only if there is no other data in the `Backup path`!"
     },
+    "createSubfolderPerProfile": {
+      "label": "Create subfolder for Joplin profile",
+      "description": "Create a subfolder within the backup directory for the current profile. This allows multiple profiles from the same Joplin installation to use the same backup directory without overwriting backups made from other profiles. All profiles that use the same backup directory must have this setting enabled."
+    },
     "zipArchive": {
       "label": "Create archive",
       "description": "If a password protected backups is set, an archive is always created"
@@ -86,6 +91,7 @@
       "description": "Execute command when backup is finished"
     }
   },
+  "backupReadme": "# Joplin Backup\n\nThis folder contains one or more backups of data from the Joplin note taking application. The most recent backup was created on %s.\n\nSee the [Simple Backup documentation](https://joplinapp.org/plugins/plugin/io.github.jackgruber.backup/#restore) for information about how to restore from this backup.",
   "command": {
     "createBackup": "Create backup"
   }
diff --git a/src/settings.ts b/src/settings.ts
index bd0c69b..e20c5c2 100644
--- a/src/settings.ts
+++ b/src/settings.ts
@@ -136,6 +136,15 @@ export namespace Settings {
         label: i18n.__("settings.createSubfolder.label"),
         description: i18n.__("settings.createSubfolder.description"),
       },
+      createSubfolderPerProfile: {
+        value: false,
+        type: SettingItemType.Bool,
+        section: "backupSection",
+        public: true,
+        advanced: true,
+        label: i18n.__("settings.createSubfolderPerProfile.label"),
+        description: i18n.__("settings.createSubfolderPerProfile.description"),
+      },
       zipArchive: {
         value: "no",
         type: SettingItemType.String,
diff --git a/src/sevenZip.ts b/src/sevenZip.ts
index ef2a527..d98c777 100644
--- a/src/sevenZip.ts
+++ b/src/sevenZip.ts
@@ -1,21 +1,21 @@
 // https://sevenzip.osdn.jp/chm/cmdline/exit_codes.htm
 // https://sevenzip.osdn.jp/chm/cmdline/commands/index.htm
 import * as _7z from "node-7z";
-import * as sevenBin from "7zip-bin";
-import * as path from "path";
 import { exec } from "child_process";
 import joplin from "api";
-
-export let pathTo7zip = sevenBin.path7za;
-
-export namespace sevenZip {
-  export async function updateBinPath() {
-    pathTo7zip = path.join(
-      await joplin.plugins.installationDir(),
-      "7zip-bin",
-      pathTo7zip
-    );
-  }
+const sevenBin = joplin.require("7zip-bin");
+
+ export let pathTo7zip = sevenBin.path7za;
+
+ export namespace sevenZip {
+   export async function updateBinPath() {
+    // Not necessary with 7zip required from Joplin
+    // pathTo7zip = path.join(
+    //   await joplin.plugins.installationDir(),
+    //   "7zip-bin",
+    //   pathTo7zip
+    // );
+   }
 
   export async function setExecutionFlag() {
     if (process.platform !== "win32") {
diff --git a/webpack.config.js b/webpack.config.js
index b32f37f..9b445d2 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -205,15 +205,9 @@ const pluginConfig = { ...baseConfig, entry: './src/index.ts',
 		path: distDir,
 	},
 	plugins: [
-		new CopyPlugin({
-			patterns: [
-				{
-					from: '**/*',
-					context: path.resolve(__dirname, 'node_modules','7zip-bin'),
-					to: path.resolve(__dirname, 'dist/7zip-bin/'),
-				},
-			]
-		}),
+		// Removed a CopyPlugin (added by Simple Backup, not necessary when using
+		// Joplin's built-in 7zip)
+
 		new CopyPlugin({
 			patterns: [
 				{
