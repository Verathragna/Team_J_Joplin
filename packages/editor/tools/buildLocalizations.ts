import * as ts from 'typescript';
import { glob } from 'glob';
import { basename, dirname, join, resolve } from 'node:path';
import { writeFile } from 'node:fs/promises';

// Finds all strings localized with _(...) in packages/editor so that they can be
// transferred to the editor from the main process.
const buildLocalizations = async () => {
	const configPath = ts.findConfigFile('../', ts.sys.fileExists, 'tsconfig.json');
	const config = ts.readConfigFile(configPath, ts.sys.readFile);

	const editorPackagePath = resolve(dirname(__dirname));
	const fileNames = await glob('**/*.ts', {
		absolute: true,
		cwd: editorPackagePath,
		ignore: 'node_modules/**',
	});
	const program = ts.createProgram(fileNames, config.config);

	const localizationPatterns = new Set<string>();

	const visit = (node: ts.Node, sourceFile: ts.SourceFile) => {
		if (ts.isCallExpression(node) && node.expression.getText(sourceFile) === '_') {
			const phrase = node.arguments[0].getText(sourceFile);
			localizationPatterns.add(phrase);
		}

		ts.forEachChild(node, otherNode => visit(otherNode, sourceFile));
	};

	for (const sourceFile of program.getSourceFiles()) {
		const sourceFilePath = resolve(sourceFile.fileName);
		if (sourceFilePath.includes('node_modules') || !sourceFilePath.startsWith(editorPackagePath)) {
			continue;
		}

		ts.forEachChild(sourceFile, (node) => visit(node, sourceFile));
	}

	const autoGeneratedComment = `// AUTO-GENERATED by ${basename(__filename)}`;
	await writeFile(
		join(editorPackagePath, 'localizationPatterns.ts'),
		[
			autoGeneratedComment,
			'export default [',
			// Each pattern already includes ''s.
			...[
				...localizationPatterns.values(),
			].map(pattern => `\t${pattern},`),
			'];',
			autoGeneratedComment,
		].join('\n'),
	);
};

void buildLocalizations();
